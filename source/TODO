4# CHANGES TO CGI FILE:
---------------------

// CGI CONSTRUCTOR
cgi::cgi    ( server_data const& server, location_data const& location, string const& _path, request& req )
{
    _script = req.normalization(_path);
    _cgiBinPath = location.getCgiPath();
    errorMsg = "unknown Error";
    _pid = -1;
    _envp = NULL;
    outputCGIFile = -1;
    _cgiOutputPath = "/tmp/.serveX_" + to_string(set_time()) + "__.cgi";
    _initServerEnvVariables(server);
}

bool    cgi::executeCgi( request& req) {
    /*  Check BIN Path  */
    if (access(_cgiBinPath.c_str(), F_OK) != 0 || access(_cgiBinPath.c_str(), X_OK) != 0) 
    {
        errorMsg = "Path to binary does not exist or inaccessible";
        return false;
    }
    if (!_setupCgiEnvs(req) || !_initOutputFile() || !_executeCgiScript(req._body.bodycontent, req))
        return false;
    return true;
}


// const char *httpmethods[] = { "GET", "POST", "DELETE", "UNKNOWN" };
void    cgi::_initServerEnvVariables( server_data const& server ) {
    _cgiEnvVars["SERVER_SOFTWARE"] = "webserv/1.0";
    _cgiEnvVars["SERVER_NAME"] = server.getServerName();
    _cgiEnvVars["GATEWAY_INTERFACE"] = "CGI/1.1";
    _cgiEnvVars["SERVER_PORT"] = to_string(server.getListenPort());
    _cgiEnvVars["SERVER_PROTOCOL"] = "HTTP/1.1";
}

// initialize envirenement variables releated to the request
void    cgi::_initRequestEnvVariables( request & req ) {

    string::size_type idx = _script.find(SERVER_PATH);
    idx += sizeof(SERVER_PATH);
    _cgiEnvVars["SCRIPT_NAME"] = _script.find(idx);
    _cgiEnvVars["SCRIPT_FILENAME"] = _script;
    _cgiEnvVars["DOCUMENT_ROOT"] = SERVER_PATH;
    if (req._method & GET)
        _cgiEnvVars["REQUEST_METHOD"] = "GET";
    else if (req._method & POST)
        _cgiEnvVars["REQUEST_METHOD"] = "POST";
    else
        _cgiEnvVars["REQUEST_METHOD"] = "DELETE";
    _cgiEnvVars["QUERY_STRING"] = req._query;
    _cgiEnvVars["CONTENT_TYPE"] = req._body.bodyType; 
    _cgiEnvVars["CONTENT_LENGTH"] = to_string(req._body.contentLength);
    _cgiEnvVars["HTTP_COOKIE"] = req._header.get("Cookie");
    _cgiEnvVars["REDIRECT_STATUS"] = "200";
}



----------------------------------------------------------------------
-> make the fd of the error file public and copy it into the response

init FD to hold the error file in response:
_errorFd = cgiHandler.ioErr;

    
    struct stat fileStat;
    if (fstat(_errorFd, &fileStat) == 0)
    {
        if (fileStat.st_size != 0)
        {
            close(_errorFd);
            remove("/tmp/.cgiError");
            return _setup_error_pages(500, VTS.getErrorPages(), "SYNTAX ISSUE");
        }
    }

close fd in cgi.cpp and delete error file -> destructor